version: "2.0"

services: 

    # the proxy server. This serves the routes to the webhook and app.
    # ...however its primary goal is to serve the static files
    server:
        image: nginx
        ports:
            - "8080:80"
        links:
            - app:app
            - render_webhook:render_webhook
        env_file: 
            - .env
        depends_on: 
            - app
            - render_webhook
        volumes:
            - ./dist:/var/www:ro
            - ./nginx.conf:/etc/nginx/nginx.conf:ro

    # node_modules is shared between render_webhook and app
    # all the node modules are written to the shared volume node_modules_data
    node_modules:
        build:
            dockerfile: Dockerfile.dev.modules
            context: .
        working_dir: /usr/src/app
        volumes:
            - node_modules_data:/usr/src/app/node_modules
            - ./package.json:/usr/src/app/package.json

    # the render webhook will render the static pages when the webhook is called
    # (in development this will also run the watchers)
    render_webhook:
        image: node:7.7-alpine
        env_file: 
            - .env
        environment: 
            - SRC_DIR=/usr/src/app/src
            - DIST_DIR=/usr/src/app/dist
            - NODE_ENV=development
        volumes:
            - .:/usr/src/app
            - node_modules_data:/usr/src/app/node_modules:ro
        working_dir: /usr/src/app
        entrypoint: npm run dev

    # the app server is mounted to /app on the proxy server and contains logic for payments (and gps?)
    app:
        image: node:7.7-alpine
        env_file: 
            - .env
        environment: 
            - NODE_ENV=development
        volumes:
            - .:/usr/src/app
            - node_modules_data:/usr/src/app/node_modules:ro
        working_dir: /usr/src/app
        entrypoint: npm run app:dev

volumes: 
    node_modules_data: